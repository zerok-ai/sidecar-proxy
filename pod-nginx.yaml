apiVersion: v1
kind: Pod
metadata:
  name: nginx
  namespace: default
  labels:
    app: nginx
spec:
  initContainers:
  - image: soarinferret/iptablesproxy
    imagePullPolicy: IfNotPresent
    name: zerok-init
    command: [ 'sh', '-c', 'iptables -t nat -I PREROUTING 1 -p tcp -i eth0 --dport 80 -j REDIRECT --to-port 15003; echo updated iptables; iptables -t nat --list && sleep 5']
    securityContext:
      capabilities:
        add:
        - NET_ADMIN
      privileged: true
  containers:
  - image: nginx
    imagePullPolicy: IfNotPresent
    name: nginx
    ports:
    - containerPort: 80
      name: http
      protocol: TCP
    resources: 
      limits:
        cpu: "2"
        memory: 1Gi
      requests:
        cpu: 10m
        memory: 40Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
      - mountPath: /etc/nginx/conf.d
        name: target   
  - image: nginx
    imagePullPolicy: IfNotPresent
    name: proxy
    ports:
    - containerPort: 15003
      name: http
      protocol: TCP
    resources:
      limits:
        cpu: "2"
        memory: 1Gi
      requests:
        cpu: 10m
        memory: 40Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File  
    volumeMounts:
      - mountPath: /etc/nginx/conf.d
        name: default   
  terminationGracePeriodSeconds: 30
  volumes:
    - configMap:
        defaultMode: 256
        name: default
        optional: false
      name: default
    - configMap:
        defaultMode: 256
        name: target
        optional: false
      name: target

---

apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: default
spec:
  ports:
  - port: 80
    protocol: TCP
  selector:
    app: nginx
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

---

apiVersion: v1
kind: Service
metadata:
  name: proxy
  namespace: default
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 15003
  selector:
    app: nginx
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

--- 

apiVersion: v1
data:
  default.conf: |
    server {
        listen       15003;
        server_name  localhost;
        access_log  /var/log/nginx/access.log  main;
        location / {
            add_header Content-Type text/plain;
            # return 200 'proxy';
            proxy_pass http://0.0.0.0:80;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
kind: ConfigMap
metadata:
  name: default
  namespace: default

---

apiVersion: v1
data:
  default.conf: |
    server {
        listen       80;
        server_name  localhost;
        access_log  /var/log/nginx/access.log  main;
        location / {
            add_header Content-Type text/plain;
            return 200 'target';
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
kind: ConfigMap
metadata:
  name: target
  namespace: default

